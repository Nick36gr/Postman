{
	"info": {
		"_postman_id": "b3f5a579-4209-4310-ae6a-d9c742e5f869",
		"name": "HomeWork 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29308023"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Nikolay\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.age).to.eql(35);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.salary).to.eql(15);\r",
							"});\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let jsonData = pm.response.json();\r",
							"let reqData = request.data\r",
							"let reqAge = reqData.age\r",
							"let reqName = reqData.name\r",
							"let reqSalary = +reqData.salary\r",
							"console.log(reqAge)\r",
							"console.log(reqName)\r",
							"console.log(reqSalary)\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqName);\r",
							"});\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(reqSalary)\r",
							"});\r",
							"\r",
							"pm.test(\"Family\", function () {\r",
							"pm.expect(jsonData.salary).to.eql (reqSalary)\r",
							"});\r",
							"\t\t\t\t\t\t\t\r",
							"console.log(jsonData.family)\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(60);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikolay",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "15",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json\r",
							"var respData = pm.response.json();\r",
							"var reqData = +pm.request.url.query.toObject()\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(+respData.age).to.eql(+reqData.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(respData.family)\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check that the name parameter has the value Lucky.\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"the dog parameter has age parameters\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.property(\"age\")\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"that the age parameter has a value of 4\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Nikolay&age=35&salary=15",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikolay"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "15"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData = pm.response.json()\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"let reqName = reqData.name\r",
							"pm.test(\"Check name\", function() {\r",
							"pm.expect(respData.name).to.eql(reqName)\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"let reqAge = reqData.age\r",
							"pm.test(\"Check age\", function() {\r",
							"pm.expect(respData.age).to.eql(+reqAge)\r",
							"});\r",
							"//Вывести в консоль параметр salary из request\r",
							"let reqSalary = +reqData.salary;\r",
							"console.log(reqSalary);\r",
							"// Вывести в консоль параметр salary из response\r",
							"let respSalary = respData.salary;\r",
							"console.log(respSalary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(respSalary[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(respSalary[1]);\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(respSalary[2]);\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check salary 0\", function () {\r",
							"pm.expect(respSalary[0]).to.eql(reqSalary)\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check salary 1\", function () {\r",
							"pm.expect(Number(respSalary[1])).to.eql(reqSalary*2)\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Check salary 2\", function () {\r",
							"pm.expect (Number(respSalary[2])).to.eql(reqSalary*3)\r",
							"});\r",
							"// Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", respData.name);\r",
							"// Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", respData.age);\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", respData.salary);\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (i in respData.salary) {\r",
							"console.log(respData.salary[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Nikolay&age=35&salary=15",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikolay"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "15"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Спарсить response body в json.\r",
							"// Спарсить request.\r",
							"let jsonData = pm.response.json();\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"let envSalary = pm.environment.get(\"salary\");\r",
							"console.log(envSalary)\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"let envAge = pm.environment.get(\"age\");\r",
							"console.log(envAge)\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"let envName = pm.environment.get(\"name\");\r",
							"console.log(envName)\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"test person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check that the start_qa_salary parameter is equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.person.start_qa_salary).to.eql(reqData.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check that the start_qa_salary_after_6_months is equal to salary from request\", function () {\r",
							"    pm.expect(+jsonData.person.qa_salary_after_6_months).to.eql(reqData.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check that the start_qa_salary_after_12_months is equal to salary from request\", function () {\r",
							"    pm.expect(+jsonData.person.qa_salary_after_12_months).to.eql(reqData.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check that the start_qa_salary_after_1.5 parameter is equal to salary from request\", function () {\r",
							"    pm.expect(+jsonData['person.qa_salary_after_1.5_year']).to.eql(reqData.salary*3.3)\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check that the start_qa_salary_after_3.5_years parameter is equal to salary from request\", function () {\r",
							"    pm.expect(+jsonData.person['start_qa_salary_after_3.5_years']).to.eql(reqData.salary*3.8)\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"test name 1 element\", function () {\r",
							"    pm.expect(+jsonData.person.u_name[1]).to.eql(15)\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check that the u_age parameter is equal to age from request\", function () {\r",
							"    pm.expect(+jsonData.person.u_age).to.eql(35)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 5 years\", function () {\r",
							"    pm.expect(+jsonData.u_salary_5_years).to.eql(reqData.salary*4.2)\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person) {\r",
							"    console.log(jsonData.person[i])\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikolay",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "15",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72:5005"
		}
	]
}